
# Hub types ---------------------------------------------
type Hub {
  hubId: ID!
  name: String!
  latitude: Float!
  longitude: Float!
  radius: Int! # in meters
  hubType: HubType!
  createdBy: ID!
  createdAt: AWSDateTime!
  description: String!
  isActive: Boolean!
  
  # Will implement later:
  # markers: [HubMarker]
  # inviteCode: String
  # qrCode: String
  # polygon: String
  # memberCount: Int
}

enum HubType {
  PUBLIC
  PRIVATE
}

input CreateHubInput {
  userId: ID
  name: String!
  description: String!
  latitude: Float!
  longitude: Float!
  radius: Int!
  hubType: HubType!
}

# User Types ---------------------------------------------
type User {
  userId: ID!
  profile: UserProfile!
  preferences: UserPreferences!
  joinedAt: AWSDateTime!
  currentHub: String
  favoriteHubs: [FavoriteHub!]!
  blockedUsers: [String!]
  updatedAt: AWSDateTime!
}

type UserProfile {
  displayName: String!
  bio: String
  friends: [String!]
}

type UserPreferences {
  theme: Theme!
  notifications: Boolean!
  locationSharing: LocationSharing!
  profileVisibility: ProfileVisibility!
  isAnonymous: Boolean!
}

type FavoriteHub {
  name: String!
  hubId: String!
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum LocationSharing {
  ALWAYS
  HUBS_ONLY
  NEVER
}

enum ProfileVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

input CreateUserInput {
  displayName: String!
  userId: String
  bio: String
}

input UserPreferencesInput {
  theme: Theme
  notifications: Boolean
  locationSharing: LocationSharing
  profileVisibility: ProfileVisibility
  isAnonymous: Boolean
}

type Query {
  # Hub queries
  getHub(hubId: ID!): Hub

  getNearbyHubs(
    latitude: Float!
    longitude: Float!
    radiusKm: Float = 3.0
    limit: Int = 50
    hubType: HubType
  ): [Hub!]!

  # Will implement later:
  # getNearbyHubs(latitude: Float!, longitude: Float!, radiusKm: Float): [Hub]
  # searchHubs(query: String!, latitude: Float, longitude: Float): [Hub]

# User queries
  getMe(testUserId: ID): User

  getUserProfile(userId: ID!, testUserId: ID): UserProfile
}
  
type Mutation {
  # Hub mutations
  createHub(input: CreateHubInput!): Hub!

  deleteHub(hubId: ID!, userId: ID): Boolean!

  # Will implement later:
  # updateHub(hubId: ID!, input: UpdateHubInput!): Hub!

  # User mutations
  createUser(input: CreateUserInput!): User!
}

type Subscription {
  # Will implement later:
  # onHubCreated: Hub @aws_subscribe(mutations: ["createHub"])
  # onHubUpdated(hubId: ID!): Hub @aws_subscribe(mutations: ["updateHub"])
  # onHubDeleted: ID @aws_subscribe(mutations: ["deleteHub"])
}

# AWS-specific scalar types
scalar AWSDateTime